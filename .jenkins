pipeline {
    agent any 
    stages {
        stage('Clone repo') {
            steps {
                script {
                    // deleteDir()

                    properties([
                        parameters([
                            separator(name: "PRODUCT_ENVIRONMENT", sectionHeader: "Product Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'product_name',
                                defaultValue: 'apim',
                                description: 'Product name',
                                trim: true
                            ),
                            string(
                                name: 'product_image',
                                defaultValue: 'apim:4.1.0',
                                description: 'Product image name',
                                trim: true
                            ),
                            separator(name: "BUILD_ENVIRONMENT", sectionHeader: "Build Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            ,string(
                                name: 'product_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/testgrid-jenkins-library',
                                description: 'The WSO2 product that needs to be tested from TestGrid. Check the README file on https://github.com/wso2/testgrid-jenkins-library/tree/main/README.md',
                                trim: true
                            ),
                            string(
                                name: 'product_repo_branch',
                                defaultValue: 'main',
                                description: 'Branch name of the repository, which needs to be deployed to the cluster.',
                                trim: true
                            ),
                            string(
                                name: 'Build file name',
                                defaultValue: '',
                                description: 'Build file name.',
                                trim: true
                            ),
                            separator(name: "AWS_ENVIRONMENT", sectionHeader: "AWS cloudformation Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'cnf_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/testgrid-jenkins-library',
                                description: 'Cloud formation repository url.',
                                trim: true
                            ),
                            string(
                                name: 'cnf_repo_branch',
                                defaultValue: 'main',
                                description: 'Branch name of the cloud formation repo.',
                                trim: true
                            ),
                            booleanParam(
                                name: 'create_new_cluster',
                                defaultValue: false,
                                description: 'If selected new kubernetes cluster will be created, based on the cloud formation script provided in the above repository.'
                            ),
                            separator(name: "KUBERNETES_ENVIRONMENT", sectionHeader: "Kubernetes Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'kubernetes_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/kubernetes-apim',
                                description: "Product's kubernetes repository URL.",
                                trim: true
                            ),
                            string(
                                name: 'kubernetes_repo_branch',
                                defaultValue: 'tharsanan-apim-automation',
                                description: 'Branch name of the kubernetes repository.',
                                trim: true
                            ),
                            string(
                                name: 'path_to_helm_folder',
                                defaultValue: 'advanced/am-pattern-1',
                                description: 'Relative path of the helm folder in your helm repository.',
                                trim: true
                            ),
                            string(
                                name: 'kubernetes_namespace',
                                defaultValue: 'default',
                                description: 'namespace to be deployed.',
                                trim: true
                            ),
                            text(
                                description: 'Place your values.yaml file content here.',
                                name: 'values_yaml'
                            ),
                            separator(name: "TESTING ENVIRONMENT", sectionHeader: "Testing Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'product_testing_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/apim-kubernetes-personal',
                                description: "Product's testing repository URL.",
                                trim: true
                            ),
                            string(
                                name: 'testing_entrypoint_filepath',
                                defaultValue: 'main',
                                description: 'Testing entry point file path.',
                                trim: true
                            )
                        ])
                    ])
                    def cnfFolderName = "cnf-${product_name}"
                    def kubernetesFolderName = "kubernetes-${product_name}"
                    dir("${product_name}") {
                        deleteDir()
                        git branch: "${product_repo_branch}", url: "${product_repo_url}"
                    }
                    dir(cnfFolderName) {
                        deleteDir()
                        git branch: "${cnf_repo_branch}", url: "${cnf_repo_url}"
                    }
                    dir(kubernetesFolderName) {
                        deleteDir()
                        git branch: "${kubernetes_repo_branch}", url: "${kubernetes_repo_url}"
                    }
                    
                    echo "%^%^%^^%^%^%^^hellooooooooooooooooooo"
                    echo "$values_yaml"
                    echo "====sper===="
                    echo "$kubernetesFolderName/${path_to_helm_folder}/values.yaml"
                    writeFile(file: "$kubernetesFolderName/${path_to_helm_folder}/values.yaml", text: "$values_yaml")
                    // echo "$values_yaml" > "$kubernetesFolderName/${path_to_helm_folder}/values.yaml"
                }
            }
        }
        stage('Build product') {
            steps {
                script {
                    echo "Build product stage"
                }
            }
        }
        stage('Create cluster') {
            when {
                expression { create_new_cluster.toBoolean() }
            }
            steps {
                script {
                    echo "Create cluster stage"
                    sh "chmod +x -R ${env.WORKSPACE}"
                    
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "aws-creds-tharsanan	",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh '''
                            ./scripts-cluster/create-cluster.sh
                        '''
                    }
                }
            }
        }
        stage('Deploy into cluster') {
            steps {
                script {
                    echo "Deploy into cluster stage $WORKSPACE $kubernetes_namespace"
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "aws-creds-tharsanan	",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=120s"
                        sh "helm repo add wso2 https://helm.wso2.com && helm repo update"
                        sh "helm dependency build 'kubernetes-$product_name'/'$path_to_helm_folder'"
                        sh "helm install '$product_name' 'kubernetes-$product_name'/'$path_to_helm_folder'"
                    }
                }
            }
        }
        stage('Testing') {
            steps {
                script {
                    echo "Testing in progress."
                    
                }
            }
        }
    }
}