pipeline {
    agent any 
    stages {
        stage('Clone repo') {
            steps {
                script {
                    // deleteDir()

                    properties([
                        parameters([
                            separator(name: "PRODUCT_ENVIRONMENT", sectionHeader: "Product Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'product_name',
                                defaultValue: 'apim',
                                description: 'Product name',
                                trim: true
                            ),
                            separator(name: "AWS_ENVIRONMENT", sectionHeader: "AWS cloudformation Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'cnf_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/testgrid-jenkins-library',
                                description: 'Cloud formation repository url.',
                                trim: true
                            ),
                            string(
                                name: 'cnf_repo_branch',
                                defaultValue: 'main',
                                description: 'Branch name of the cloud formation repo.',
                                trim: true
                            ),
                            separator(name: "KUBERNETES_ENVIRONMENT", sectionHeader: "Kubernetes Details",
                                separatorStyle: "border-width: 0",
                                sectionHeaderStyle: """
                                    background-color: #7ea6d3;
                                    text-align: center;
                                    padding: 4px;
                                    color: #343434;
                                    font-size: 22px;
                                    font-weight: normal;
                                    text-transform: uppercase;
                                    font-family: 'Orienta', sans-serif;
                                    letter-spacing: 1px;
                                    font-style: italic;
                                    margin-bottom: 25px;
                                """),           
                            string(
                                name: 'kubernetes_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/kubernetes-apim',
                                description: "Product's kubernetes repository URL.",
                                trim: true
                            ),
                            string(
                                name: 'kubernetes_repo_branch',
                                defaultValue: 'tharsanan-apim-automation',
                                description: 'Branch name of the kubernetes repository.',
                                trim: true
                            ),
                            string(
                                name: 'path_to_helm_folder',
                                defaultValue: 'advanced/am-pattern-1',
                                description: 'Relative path of the helm folder in your helm repository.',
                                trim: true
                            ),
                            string(
                                name: 'kubernetes_namespace',
                                defaultValue: 'default',
                                description: 'namespace to be deployed.',
                                trim: true
                            ),
                            separator(name: "TESTING ENVIRONMENT", sectionHeader: "Testing Details",
			separatorStyle: "border-width: 0",
			sectionHeaderStyle: """
				background-color: #7ea6d3;
				text-align: center;
				padding: 4px;
				color: #343434;
				font-size: 22px;
				font-weight: normal;
				text-transform: uppercase;
				font-family: 'Orienta', sans-serif;
				letter-spacing: 1px;
				font-style: italic;
                margin-bottom: 25px;
			"""),
                            string(
                                name: 'product_testing_repo_url',
                                defaultValue: 'https://github.com/Tharsanan1/apim-kubernetes-personal',
                                description: "Product's testing repository URL.",
                                trim: true
                            ),
                            string(
                                name: 'product_testing_repo_branch',
                                defaultValue: 'main',
                                description: "Product's testing repository branch name.",
                                trim: true
                            ),
                            string(
                                name: 'test_file_path',
                                defaultValue: './',
                                description: 'Test execution relative file path',
                                trim: true
                            ),
                            string(
                                name: 'service_startup_timeout',
                                defaultValue: '600',
                                description: 'Service up timeout in seconds.',
                                trim: true
                            )
                        ])
                    ])
                    def cnfFolderName = "scripts-cluster/${product_name}/cnf-${product_name}"
                    def kubernetesFolderName = "scripts-cluster/${product_name}/kubernetes-${product_name}"
                    def testingFolderName = "scripts-cluster/${product_name}/test-${product_name}"
                    dir(cnfFolderName) {
                        git branch: "${cnf_repo_branch}", url: "${cnf_repo_url}"
                    }
                    dir(kubernetesFolderName) {
                        deleteDir()
                        git branch: "${kubernetes_repo_branch}", url: "${kubernetes_repo_url}"
                    }
                    dir(testingFolderName) {
                        deleteDir()
                        git branch: "${product_testing_repo_branch}", url: "${product_testing_repo_url}"
                    }
                    sh "chmod +x -R ${env.WORKSPACE}"
                }
            }
        }
        stage('Deploy into cluster') {
            steps {
                script {
                    echo "Deploy into cluster stage $WORKSPACE $kubernetes_namespace"
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "aws-creds-tharsanan	",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "./scripts-cluster/deploy.sh ${product_name}"
                    }
                }
            }
        }
        stage('Testing') {
            steps {
                script {
                    echo "Testing in progress."
                    withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "aws-creds-tharsanan	",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        hostName = sh(
                            returnStdout: true, 
                            script: './scripts-cluster/extract-cluster-details.sh'
                        )
                        sh "kubectl wait --for=condition=ready pod   -l eks.amazonaws.com/fargate-profile=fp-default   --timeout='$service_startup_timeout'"
                    }
                    
                    env.HOST_NAME=hostName.trim()
                       
                    sh "sh ./scripts-cluster/test.sh ${product_name}"
                }
            }
        }
    }
    post {
        always {
            withCredentials([[
                        $class: 'AmazonWebServicesCredentialsBinding',
                        credentialsId: "aws-creds-tharsanan	",
                        accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                        secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                    ]]) {
                        sh "sh ./scripts-cluster/cleanup.sh ${product_name}"
                    }
            
            cleanWs deleteDirs: true, notFailBuild: true
        }
    }
}
